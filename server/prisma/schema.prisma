// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// cach update db
// sudo su -
// npm install
// pm2 status
// pm2 monit
// npx prisma migrate dev --name init
// npx prisma generate
// npm run seed
// git push origin main

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum OrderStatus {
  UNPAID
  ON_HOLD
  AWAITING_SHIPMENT
  AWAITING_COLLECTION
  IN_TRANSIT
  DELIVERED
  COMPLETED
  CANCELLED
}

datasource db {
  provider = "postgresql" // or "mysql" or "sqlite" depending on your database
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Warehouse {
  id      Int    @id @default(autoincrement())
  name    String
  address String
  shop    Shop   @relation(fields: [shop_id], references: [shop_id])
  shop_id String
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  name       String
  joined_date DateTime
  role       Role
  shops      Shop[]
}

model Subscription {
  id       Int    @id @default(autoincrement())
  amount   Float
  duration Int
  shops    Shop[]
}

model Marketplace {
  id    Int    @id @default(autoincrement())
  name  String
  shops Shop[]
}

model Product {
  id      Int    @id @default(autoincrement())
  shop    Shop   @relation(fields: [shop_id], references: [shop_id])
  shop_id String
}

model APIServices {
  service_id String @id
  name       String
  email      String
  status     Int
  app_key    String
  app_secret String
  shops      Shop[]
}

model Order {
  id          Int    @id @default(autoincrement())
  tracking_id String
  status      OrderStatus
  shop        Shop   @relation(fields: [shop_id], references: [shop_id])
  shop_id     String
}

model Shop {
  shop_id                  String   @id
  shop_name                String
  shop_code                String
  access_token             String
  access_token_expire_in   DateTime
  user                     User     @relation(fields: [user_id], references: [id])
  user_id                  Int
  marketplace              Marketplace @relation(fields: [marketplace_id], references: [id])
  marketplace_id           Int
  api_service              APIServices @relation(fields: [api_service_id], references: [service_id])
  api_service_id           String
  subscription_start_date  DateTime
  subscription_expire_date DateTime
  refresh_token            String
  refresh_token_expire_in  DateTime
  seller_base_region       String
  shop_cipher              String
  subscription             Subscription @relation(fields: [subscription_id], references: [id])
  subscription_id          Int
  warehouses               Warehouse[]
  products                 Product[]
  orders                   Order[]
}